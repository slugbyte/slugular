/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 8);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst morphdom = __webpack_require__(16);\n\nvar nodeSetup = __webpack_require__(11);\nvar getElementById = __webpack_require__(9);\nvar getElementsByQuery = __webpack_require__(10);\n\nconst slugular = module.exports = (type, options) => {\n  type = type.trim();\n  options = options || {};\n\n  if (type.startsWith('#')) return getElementById(type);\n\n  if (type.startsWith('?')) return getElementsByQuery(type);\n\n  if (type == 'text') return document.createTextNode(options);\n\n  var result = document.createElement(type);\n  if (typeof options === 'string') {\n    result.textContent = options;\n    return result;\n  }\n\n  if (options instanceof Element || options instanceof Text) {\n    result.appendChild(options);\n    return result;\n    return;\n  }\n\n  if (Array.isArray(options)) return nodeSetup.setChildren(result, options);\n\n  nodeSetup.setAttributes(result, options);\n  nodeSetup.setChildren(result, options);\n  nodeSetup.setStyles(result, options);\n  nodeSetup.setEvents(result, options);\n\n  // set remaining options\n  for (var key in options) {\n    try {\n      result[key] = options[key];\n    } catch (e) {\n      console.error('fatal attempt to set attribute');\n      console.error(e);\n    }\n  }\n\n  return result;\n};\n\nslugular.createStore = __webpack_require__(12);\n\nslugular.UnorderedList = items => {\n  return slugular('ul', items.map(item => slugular('li', [item])));\n};\n\nslugular.Input = config => {\n  if (config.type === 'select') {\n    delete config.type;\n    let options = config.options.map(item => slugular('option', item));\n    delete config.options;\n    config.children = options;\n    return slugular('select', config);\n  }\n\n  if (config.type === 'button') {\n    return slugular('button', config);\n  }\n\n  return slugular('input', config);\n};\n\nslugular.LabelInput = config => {\n  if (!config.id) config.id = btoa(Math.random());\n\n  var label = config.label;\n  delete config.label;\n  label = slugular('label', label);\n  let children = [label, slugular.Input(config)];\n\n  if (config.type === 'checkbox') {\n    children.reverse();\n    label.setAttribute('for', config.id);\n  }\n\n  return slugular('fieldset', children);\n};\n\nslugular.Form = (inputs, submitHandler, options = {}) => {\n  let children = inputs.map(config => config.label ? slugular.LabelInput(config) : slugular.Input(config));\n  return slugular('form', Object.assign(options, {\n    children,\n    events: {\n      submit: e => {\n        e.preventDefault();\n        submitHandler(e.target, e);\n      }\n    }\n  }));\n};\n\nslugular.render = (app, target) => {\n  if (!app.id) throw new Error('root node of app must set id');\n  let container = document.getElementById(app.id);\n  if (container) return morphdom(container, app, {\n    onBeforeElUpdated: (fromEl, toEl) => {\n      for (let key in fromEl.slugularEvents) {\n        fromEl.removeEventListener(key, fromEl.slugularEvents[key]);\n        toEl.removeEventListener(key, fromEl.slugularEvents[key]);\n      }\n\n      for (let key in toEl.slugularEvents) {\n        fromEl.slugularEvents[key] = toEl.slugularEvents[key];\n        fromEl.addEventListener(key, toEl.slugularEvents[key]);\n      }\n\n      return true;\n    }\n  });\n  target.appendChild(app);\n};\n\nslugular.hash = () => btoa(Math.random());\n\nslugular.load = (parent, child) => new Promise((resolve, reject) => {\n  parent.appendChild(child);\n  child.addEventListener('load', e => resolve(e));\n  child.addEventListener('error', e => reject(e));\n  child.addEventListener('abort', e => reject(e));\n});\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.js\n// module id = 0\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst $ = __webpack_require__(0);\n\nvar initalState;\n\n// attempt to load state from store\n// if it fails set up the default state\ntry {\n  initalState = JSON.parse(localStorage.state);\n} catch (e) {\n  console.error('no state found');\n  initalState = {\n    title: '(edit me) two way data binding',\n    navLinks: [{ text: 'Contact', path: '' }, { text: 'About', path: '' }, { text: 'Home', path: '' }],\n    notes: [{\n      id: $.hash(),\n      editing: false,\n      title: 'Create a note, make sure title and content are 10 characters',\n      content: 'Click delete to remove a note'\n    }, {\n      id: $.hash(),\n      editing: true,\n      title: 'Double click notes to edit them',\n      content: 'Change my text'\n    }]\n  };\n}\n\nvar store = module.exports = $.createStore(initalState);\n\n// add a listener to the store that saves the state to localStorage\n// on every change\nstore.addListner(state => {\n  try {\n    localStorage.state = JSON.stringify(state);\n  } catch (e) {\n    console.error('failed to save state', e);\n  }\n});\n\n//////////////////\n// WEBPACK FOOTER\n// ./example/lib/store.js\n// module id = 1\n// module chunks = 0\n\n//# sourceURL=webpack:///./example/lib/store.js?");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n__webpack_require__(13);\nconst $ = __webpack_require__(0);\n\nconst { state, setState } = __webpack_require__(1);\n\nconst Header = module.exports = ({ title, navLinks }) => {\n  var navAnchors = navLinks.map(item => $('a', { textContent: item.text, href: item.path }));\n  return $('header', {\n    className: 'navbar',\n    children: [$('h1', {\n      textContent: title || '',\n      events: {\n        click: () => setState({ title: state.title + '!' })\n      }\n    }), $.Input({\n      name: 'title', value: state.title,\n      onKeyUp: e => setState({ title: e.target.value })\n    })]\n  });\n};\n\n//////////////////\n// WEBPACK FOOTER\n// ./example/component/header/index.js\n// module id = 2\n// module chunks = 0\n\n//# sourceURL=webpack:///./example/component/header/index.js?");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n__webpack_require__(14);\nconst $ = __webpack_require__(0);\n\n// TODO: // make an interface for redux-form style controlled forms\n// with validation and the works\n\nconst { state, setState } = __webpack_require__(1);\n\nvar resetFormState = () => setState({ formNoteCreate: {\n    title: '',\n    content: '',\n    contentError: false,\n    contentDirty: false,\n    titleError: false,\n    titleDirty: false\n  } });\n\nvar handleSubmit = f => {\n  if (!validate(f.title.value) || !validate(f.content.value)) {\n    return setState({ formNoteCreate: Object.assign(state.formNoteCreate, { submitted: true, error: true }) });\n  }\n\n  let note = {\n    id: $.hash(),\n    title: f.title.value,\n    content: f.content.value,\n    complete: false,\n    editing: false\n  };\n\n  setState({ notes: [note].concat(state.notes) });\n  resetFormState();\n};\n\nvar controlledInput = (formName, inputName, options = {}) => e => {\n  let validate = value => value !== '';\n  validate = options.validate || validate;\n\n  let change = {};\n  let inputChanges = {};\n  inputChanges[inputName] = e.target.value;\n  inputChanges[inputName + 'Error'] = !validate(e.target.value);\n\n  // only dirty input if user has typed at least one char\n  if (!inputChanges[inputName + 'Dirty'] && e.target.value) inputChanges[inputName + 'Dirty'] = true;\n\n  change[formName] = Object.assign(state[formName], inputChanges);\n  setState(change);\n};\n\nlet validate = value => value.length > 9;\n\nconst NoteCreate = module.exports = () => $.Form([{\n  name: 'title',\n  placeholder: 'title',\n  value: state.formNoteCreate.title,\n  classes: {\n    error: state.formNoteCreate.error && state.formNoteCreate.titleError || state.formNoteCreate.error && !state.formNoteCreate.titleDirty\n  },\n  onKeyUp: controlledInput('formNoteCreate', 'title', { validate })\n}, { name: 'content', placeholder: 'content', value: state.formNoteCreate.content,\n  classes: {\n    error: state.formNoteCreate.error && state.formNoteCreate.contentError || state.formNoteCreate.error && !state.formNoteCreate.contentDirty\n  },\n  onKeyUp: controlledInput('formNoteCreate', 'content', { validate })\n}, { type: 'submit', value: 'create note' }], handleSubmit, { className: 'note-create' });\n\n// reset form state on page load\nresetFormState();\n\n//////////////////\n// WEBPACK FOOTER\n// ./example/component/note-create/index.js\n// module id = 3\n// module chunks = 0\n\n//# sourceURL=webpack:///./example/component/note-create/index.js?");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Note = __webpack_require__(6);\n\nconst NoteList = module.exports = ({ notes }) => {\n  return $.UnorderedList(notes.map(note => Note({ note })));\n};\n\n//////////////////\n// WEBPACK FOOTER\n// ./example/component/note-list/index.js\n// module id = 4\n// module chunks = 0\n\n//# sourceURL=webpack:///./example/component/note-list/index.js?");

/***/ }),
/* 5 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin\n\n//////////////////\n// WEBPACK FOOTER\n// ./example/style/main.scss\n// module id = 5\n// module chunks = 0\n\n//# sourceURL=webpack:///./example/style/main.scss?");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

eval("'use strcit';\n\n__webpack_require__(15);\nconst $ = __webpack_require__(0);\nconst NOTE = __webpack_require__(7);\n\nvar handleSubmit = note => f => NOTE.update({\n  id: note.id,\n  editing: false,\n  title: f.title.value,\n  content: f.content.value });\n\nconst Note = module.exports = ({ note }) => {\n  return $('div', {\n    classes: {\n      note: true,\n      editing: note.editing\n    },\n    onDoubleClick: e => NOTE.update({ id: note.id, editing: !note.editing }),\n    children: [$('main', {\n      children: [$('h2', note.title), $('p', note.content), $('button', {\n        textContent: 'delete',\n        onClick: e => NOTE.delete({ id: note.id })\n      })]\n    }), $.Form([{ name: 'title', value: note.title }, { name: 'content', value: note.content }, {\n      type: 'button',\n      textContent: 'cancel',\n      onClick: e => NOTE.update({ id: note.id, editing: false })\n    }, { type: 'submit', value: 'update note' }], handleSubmit(note))]\n  });\n};\n\n//////////////////\n// WEBPACK FOOTER\n// ./example/component/note/index.js\n// module id = 6\n// module chunks = 0\n\n//# sourceURL=webpack:///./example/component/note/index.js?");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst { setState, state } = __webpack_require__(1);\n\nconst NOTE = module.exports = {};\n\nNOTE.create = note => {\n  setState({ notes: [note].concat(state.notes) });\n};\n\nNOTE.delete = note => {\n  setState({ notes: state.notes.filter(item => {\n      return item.id !== note.id;\n    }) });\n};\n\nNOTE.update = note => {\n  setState({ notes: state.notes.map(item => {\n      console.log('note', note, item);\n      if (note.id == item.id) {\n        return Object.assign(item, note);\n      }\n      return item;\n    })\n  });\n};\n\n//////////////////\n// WEBPACK FOOTER\n// ./example/lib/note.js\n// module id = 7\n// module chunks = 0\n\n//# sourceURL=webpack:///./example/lib/note.js?");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n__webpack_require__(5);\n\nconst $ = window.$ = __webpack_require__(0);\nconst { setState, addListner } = __webpack_require__(1);\n\nconst Header = __webpack_require__(2);\nconst NoteCreate = __webpack_require__(3);\nconst NoteList = __webpack_require__(4);\n\nconst App = state => {\n  return $('div', {\n    id: 'root',\n    children: [Header(state), NoteCreate(),\n    //$.UnorderedList(state.notes.map(item => $('p', item.title)))\n    NoteList(state)]\n  });\n};\n\n// setup a listener for rendering the app on any state changes\naddListner(state => {\n  console.log('state', state);\n  $.render(App(state), document.body);\n});\n\n// trigger a state change to cause the render listener to run once \n// on page load\nsetState();\n\n//////////////////\n// WEBPACK FOOTER\n// ./example/main.js\n// module id = 8\n// module chunks = 0\n\n//# sourceURL=webpack:///./example/main.js?");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = id => {\n  id = id.slice(1, id.length).trim();\n  return document.getElementById(id);\n};\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/get-element-by-id.js\n// module id = 9\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/lib/get-element-by-id.js?");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = query => {\n  query = query.slice(1, query.length).trim();\n  var nodes = document.querySelectorAll(query);\n  return Array.prototype.concat.apply([], nodes);\n};\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/get-elements-by-query.js\n// module id = 10\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/lib/get-elements-by-query.js?");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar nodeSetup = module.exports = {};\n\nnodeSetup.setChildren = (node, options) => {\n  var children;\n  if (Array.isArray(options)) {\n    children = options;\n  } else {\n    children = options.children;\n    delete options.children;\n  }\n\n  if (children) children.forEach(child => {\n    node.appendChild(child);\n  });\n\n  return node;\n};\n\nnodeSetup.setAttributes = (node, options) => {\n  var attributes = options.attributes;\n  delete options.attributes;\n\n  if (attributes) for (var key in attributes) node.setAttribute(key, attributes[key]);\n\n  return node;\n};\n\nnodeSetup.setStyles = (node, options) => {\n  var style = options.style;\n  delete options.style;\n\n  if (style) for (let key in style) node.style[key] = style[key];\n\n  var classes = options.classes;\n  delete options.classes;\n\n  for (let key in classes) {\n    if (classes[key]) node.classList.add(key);else node.classList.remove(key);\n  }\n\n  return node;\n};\n\nnodeSetup.setEvents = (node, options) => {\n  var events = options.events;\n  delete options.events;\n  node.slugularEvents = {};\n\n  var slugularEvents = {\n    onClick: 'click',\n    onDoubleClick: 'dblclick',\n    onMouseUp: 'mouseup',\n    onMouseDown: 'mousedown',\n    onMouseEnter: 'mouseenter',\n    onMouseLeave: 'mouseleave',\n    onMouseOut: 'mouseout',\n    onMouseMove: 'mousemove',\n    onMouseOver: 'mouseover',\n    onSubmit: 'submit',\n    onBlur: 'blur',\n    onError: 'error',\n    onSelect: 'onselect',\n    onFocus: 'focus',\n    onFocusIn: 'focusin',\n    onFocusOut: 'focusout',\n    onLoad: 'load',\n    onUnload: 'unload',\n    onScoll: 'scroll',\n    onKeyDown: 'keydown',\n    onKeyUp: 'keyup',\n    onKeyPress: 'keypress',\n    onChange: 'change'\n  };\n\n  if (events) for (let key in events) {\n    node.addEventListener(key, events[key]);\n    node.slugularEvents[key] = events[key];\n  }\n\n  for (let key in slugularEvents) {\n    if (options[key]) {\n      node.addEventListener(slugularEvents[key], options[key]);\n      node.slugularEvents[slugularEvents[key]] = options[key];\n      delete options[key];\n    }\n  }\n\n  return node;\n};\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/node-setup.js\n// module id = 11\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/lib/node-setup.js?");

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nlet listners = [];\nlet state = {};\n\nlet setState = changes => {\n  state = Object.assign(state, changes);\n  listners.forEach(cb => cb(state));\n};\n\nlet addListner = cb => {\n  if (typeof cb === 'function') listners.push(cb);\n};\n\nlet createStore = module.exports = initialState => {\n  setState(initialState);\n\n  return {\n    state,\n    setState,\n    addListner\n  };\n};\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/store.js\n// module id = 12\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/lib/store.js?");

/***/ }),
/* 13 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin\n\n//////////////////\n// WEBPACK FOOTER\n// ./example/component/header/_header.scss\n// module id = 13\n// module chunks = 0\n\n//# sourceURL=webpack:///./example/component/header/_header.scss?");

/***/ }),
/* 14 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin\n\n//////////////////\n// WEBPACK FOOTER\n// ./example/component/note-create/_note-create.scss\n// module id = 14\n// module chunks = 0\n\n//# sourceURL=webpack:///./example/component/note-create/_note-create.scss?");

/***/ }),
/* 15 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin\n\n//////////////////\n// WEBPACK FOOTER\n// ./example/component/note/_note.scss\n// module id = 15\n// module chunks = 0\n\n//# sourceURL=webpack:///./example/component/note/_note.scss?");

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar range; // Create a range object for efficently rendering strings to elements.\nvar NS_XHTML = 'http://www.w3.org/1999/xhtml';\n\nvar doc = typeof document === 'undefined' ? undefined : document;\n\nvar testEl = doc ?\n    doc.body || doc.createElement('div') :\n    {};\n\n// Fixes <https://github.com/patrick-steele-idem/morphdom/issues/32>\n// (IE7+ support) <=IE7 does not support el.hasAttribute(name)\nvar actualHasAttributeNS;\n\nif (testEl.hasAttributeNS) {\n    actualHasAttributeNS = function(el, namespaceURI, name) {\n        return el.hasAttributeNS(namespaceURI, name);\n    };\n} else if (testEl.hasAttribute) {\n    actualHasAttributeNS = function(el, namespaceURI, name) {\n        return el.hasAttribute(name);\n    };\n} else {\n    actualHasAttributeNS = function(el, namespaceURI, name) {\n        return el.getAttributeNode(namespaceURI, name) != null;\n    };\n}\n\nvar hasAttributeNS = actualHasAttributeNS;\n\n\nfunction toElement(str) {\n    if (!range && doc.createRange) {\n        range = doc.createRange();\n        range.selectNode(doc.body);\n    }\n\n    var fragment;\n    if (range && range.createContextualFragment) {\n        fragment = range.createContextualFragment(str);\n    } else {\n        fragment = doc.createElement('body');\n        fragment.innerHTML = str;\n    }\n    return fragment.childNodes[0];\n}\n\n/**\n * Returns true if two node's names are the same.\n *\n * NOTE: We don't bother checking `namespaceURI` because you will never find two HTML elements with the same\n *       nodeName and different namespace URIs.\n *\n * @param {Element} a\n * @param {Element} b The target element\n * @return {boolean}\n */\nfunction compareNodeNames(fromEl, toEl) {\n    var fromNodeName = fromEl.nodeName;\n    var toNodeName = toEl.nodeName;\n\n    if (fromNodeName === toNodeName) {\n        return true;\n    }\n\n    if (toEl.actualize &&\n        fromNodeName.charCodeAt(0) < 91 && /* from tag name is upper case */\n        toNodeName.charCodeAt(0) > 90 /* target tag name is lower case */) {\n        // If the target element is a virtual DOM node then we may need to normalize the tag name\n        // before comparing. Normal HTML elements that are in the \"http://www.w3.org/1999/xhtml\"\n        // are converted to upper case\n        return fromNodeName === toNodeName.toUpperCase();\n    } else {\n        return false;\n    }\n}\n\n/**\n * Create an element, optionally with a known namespace URI.\n *\n * @param {string} name the element name, e.g. 'div' or 'svg'\n * @param {string} [namespaceURI] the element's namespace URI, i.e. the value of\n * its `xmlns` attribute or its inferred namespace.\n *\n * @return {Element}\n */\nfunction createElementNS(name, namespaceURI) {\n    return !namespaceURI || namespaceURI === NS_XHTML ?\n        doc.createElement(name) :\n        doc.createElementNS(namespaceURI, name);\n}\n\n/**\n * Copies the children of one DOM element to another DOM element\n */\nfunction moveChildren(fromEl, toEl) {\n    var curChild = fromEl.firstChild;\n    while (curChild) {\n        var nextChild = curChild.nextSibling;\n        toEl.appendChild(curChild);\n        curChild = nextChild;\n    }\n    return toEl;\n}\n\nfunction morphAttrs(fromNode, toNode) {\n    var attrs = toNode.attributes;\n    var i;\n    var attr;\n    var attrName;\n    var attrNamespaceURI;\n    var attrValue;\n    var fromValue;\n\n    for (i = attrs.length - 1; i >= 0; --i) {\n        attr = attrs[i];\n        attrName = attr.name;\n        attrNamespaceURI = attr.namespaceURI;\n        attrValue = attr.value;\n\n        if (attrNamespaceURI) {\n            attrName = attr.localName || attrName;\n            fromValue = fromNode.getAttributeNS(attrNamespaceURI, attrName);\n\n            if (fromValue !== attrValue) {\n                fromNode.setAttributeNS(attrNamespaceURI, attrName, attrValue);\n            }\n        } else {\n            fromValue = fromNode.getAttribute(attrName);\n\n            if (fromValue !== attrValue) {\n                fromNode.setAttribute(attrName, attrValue);\n            }\n        }\n    }\n\n    // Remove any extra attributes found on the original DOM element that\n    // weren't found on the target element.\n    attrs = fromNode.attributes;\n\n    for (i = attrs.length - 1; i >= 0; --i) {\n        attr = attrs[i];\n        if (attr.specified !== false) {\n            attrName = attr.name;\n            attrNamespaceURI = attr.namespaceURI;\n\n            if (attrNamespaceURI) {\n                attrName = attr.localName || attrName;\n\n                if (!hasAttributeNS(toNode, attrNamespaceURI, attrName)) {\n                    fromNode.removeAttributeNS(attrNamespaceURI, attrName);\n                }\n            } else {\n                if (!hasAttributeNS(toNode, null, attrName)) {\n                    fromNode.removeAttribute(attrName);\n                }\n            }\n        }\n    }\n}\n\nfunction syncBooleanAttrProp(fromEl, toEl, name) {\n    if (fromEl[name] !== toEl[name]) {\n        fromEl[name] = toEl[name];\n        if (fromEl[name]) {\n            fromEl.setAttribute(name, '');\n        } else {\n            fromEl.removeAttribute(name, '');\n        }\n    }\n}\n\nvar specialElHandlers = {\n    /**\n     * Needed for IE. Apparently IE doesn't think that \"selected\" is an\n     * attribute when reading over the attributes using selectEl.attributes\n     */\n    OPTION: function(fromEl, toEl) {\n        syncBooleanAttrProp(fromEl, toEl, 'selected');\n    },\n    /**\n     * The \"value\" attribute is special for the <input> element since it sets\n     * the initial value. Changing the \"value\" attribute without changing the\n     * \"value\" property will have no effect since it is only used to the set the\n     * initial value.  Similar for the \"checked\" attribute, and \"disabled\".\n     */\n    INPUT: function(fromEl, toEl) {\n        syncBooleanAttrProp(fromEl, toEl, 'checked');\n        syncBooleanAttrProp(fromEl, toEl, 'disabled');\n\n        if (fromEl.value !== toEl.value) {\n            fromEl.value = toEl.value;\n        }\n\n        if (!hasAttributeNS(toEl, null, 'value')) {\n            fromEl.removeAttribute('value');\n        }\n    },\n\n    TEXTAREA: function(fromEl, toEl) {\n        var newValue = toEl.value;\n        if (fromEl.value !== newValue) {\n            fromEl.value = newValue;\n        }\n\n        var firstChild = fromEl.firstChild;\n        if (firstChild) {\n            // Needed for IE. Apparently IE sets the placeholder as the\n            // node value and vise versa. This ignores an empty update.\n            var oldValue = firstChild.nodeValue;\n\n            if (oldValue == newValue || (!newValue && oldValue == fromEl.placeholder)) {\n                return;\n            }\n\n            firstChild.nodeValue = newValue;\n        }\n    },\n    SELECT: function(fromEl, toEl) {\n        if (!hasAttributeNS(toEl, null, 'multiple')) {\n            var selectedIndex = -1;\n            var i = 0;\n            var curChild = toEl.firstChild;\n            while(curChild) {\n                var nodeName = curChild.nodeName;\n                if (nodeName && nodeName.toUpperCase() === 'OPTION') {\n                    if (hasAttributeNS(curChild, null, 'selected')) {\n                        selectedIndex = i;\n                        break;\n                    }\n                    i++;\n                }\n                curChild = curChild.nextSibling;\n            }\n\n            fromEl.selectedIndex = i;\n        }\n    }\n};\n\nvar ELEMENT_NODE = 1;\nvar TEXT_NODE = 3;\nvar COMMENT_NODE = 8;\n\nfunction noop() {}\n\nfunction defaultGetNodeKey(node) {\n    return node.id;\n}\n\nfunction morphdomFactory(morphAttrs) {\n\n    return function morphdom(fromNode, toNode, options) {\n        if (!options) {\n            options = {};\n        }\n\n        if (typeof toNode === 'string') {\n            if (fromNode.nodeName === '#document' || fromNode.nodeName === 'HTML') {\n                var toNodeHtml = toNode;\n                toNode = doc.createElement('html');\n                toNode.innerHTML = toNodeHtml;\n            } else {\n                toNode = toElement(toNode);\n            }\n        }\n\n        var getNodeKey = options.getNodeKey || defaultGetNodeKey;\n        var onBeforeNodeAdded = options.onBeforeNodeAdded || noop;\n        var onNodeAdded = options.onNodeAdded || noop;\n        var onBeforeElUpdated = options.onBeforeElUpdated || noop;\n        var onElUpdated = options.onElUpdated || noop;\n        var onBeforeNodeDiscarded = options.onBeforeNodeDiscarded || noop;\n        var onNodeDiscarded = options.onNodeDiscarded || noop;\n        var onBeforeElChildrenUpdated = options.onBeforeElChildrenUpdated || noop;\n        var childrenOnly = options.childrenOnly === true;\n\n        // This object is used as a lookup to quickly find all keyed elements in the original DOM tree.\n        var fromNodesLookup = {};\n        var keyedRemovalList;\n\n        function addKeyedRemoval(key) {\n            if (keyedRemovalList) {\n                keyedRemovalList.push(key);\n            } else {\n                keyedRemovalList = [key];\n            }\n        }\n\n        function walkDiscardedChildNodes(node, skipKeyedNodes) {\n            if (node.nodeType === ELEMENT_NODE) {\n                var curChild = node.firstChild;\n                while (curChild) {\n\n                    var key = undefined;\n\n                    if (skipKeyedNodes && (key = getNodeKey(curChild))) {\n                        // If we are skipping keyed nodes then we add the key\n                        // to a list so that it can be handled at the very end.\n                        addKeyedRemoval(key);\n                    } else {\n                        // Only report the node as discarded if it is not keyed. We do this because\n                        // at the end we loop through all keyed elements that were unmatched\n                        // and then discard them in one final pass.\n                        onNodeDiscarded(curChild);\n                        if (curChild.firstChild) {\n                            walkDiscardedChildNodes(curChild, skipKeyedNodes);\n                        }\n                    }\n\n                    curChild = curChild.nextSibling;\n                }\n            }\n        }\n\n        /**\n         * Removes a DOM node out of the original DOM\n         *\n         * @param  {Node} node The node to remove\n         * @param  {Node} parentNode The nodes parent\n         * @param  {Boolean} skipKeyedNodes If true then elements with keys will be skipped and not discarded.\n         * @return {undefined}\n         */\n        function removeNode(node, parentNode, skipKeyedNodes) {\n            if (onBeforeNodeDiscarded(node) === false) {\n                return;\n            }\n\n            if (parentNode) {\n                parentNode.removeChild(node);\n            }\n\n            onNodeDiscarded(node);\n            walkDiscardedChildNodes(node, skipKeyedNodes);\n        }\n\n        // // TreeWalker implementation is no faster, but keeping this around in case this changes in the future\n        // function indexTree(root) {\n        //     var treeWalker = document.createTreeWalker(\n        //         root,\n        //         NodeFilter.SHOW_ELEMENT);\n        //\n        //     var el;\n        //     while((el = treeWalker.nextNode())) {\n        //         var key = getNodeKey(el);\n        //         if (key) {\n        //             fromNodesLookup[key] = el;\n        //         }\n        //     }\n        // }\n\n        // // NodeIterator implementation is no faster, but keeping this around in case this changes in the future\n        //\n        // function indexTree(node) {\n        //     var nodeIterator = document.createNodeIterator(node, NodeFilter.SHOW_ELEMENT);\n        //     var el;\n        //     while((el = nodeIterator.nextNode())) {\n        //         var key = getNodeKey(el);\n        //         if (key) {\n        //             fromNodesLookup[key] = el;\n        //         }\n        //     }\n        // }\n\n        function indexTree(node) {\n            if (node.nodeType === ELEMENT_NODE) {\n                var curChild = node.firstChild;\n                while (curChild) {\n                    var key = getNodeKey(curChild);\n                    if (key) {\n                        fromNodesLookup[key] = curChild;\n                    }\n\n                    // Walk recursively\n                    indexTree(curChild);\n\n                    curChild = curChild.nextSibling;\n                }\n            }\n        }\n\n        indexTree(fromNode);\n\n        function handleNodeAdded(el) {\n            onNodeAdded(el);\n\n            var curChild = el.firstChild;\n            while (curChild) {\n                var nextSibling = curChild.nextSibling;\n\n                var key = getNodeKey(curChild);\n                if (key) {\n                    var unmatchedFromEl = fromNodesLookup[key];\n                    if (unmatchedFromEl && compareNodeNames(curChild, unmatchedFromEl)) {\n                        curChild.parentNode.replaceChild(unmatchedFromEl, curChild);\n                        morphEl(unmatchedFromEl, curChild);\n                    }\n                }\n\n                handleNodeAdded(curChild);\n                curChild = nextSibling;\n            }\n        }\n\n        function morphEl(fromEl, toEl, childrenOnly) {\n            var toElKey = getNodeKey(toEl);\n            var curFromNodeKey;\n\n            if (toElKey) {\n                // If an element with an ID is being morphed then it is will be in the final\n                // DOM so clear it out of the saved elements collection\n                delete fromNodesLookup[toElKey];\n            }\n\n            if (toNode.isSameNode && toNode.isSameNode(fromNode)) {\n                return;\n            }\n\n            if (!childrenOnly) {\n                if (onBeforeElUpdated(fromEl, toEl) === false) {\n                    return;\n                }\n\n                morphAttrs(fromEl, toEl);\n                onElUpdated(fromEl);\n\n                if (onBeforeElChildrenUpdated(fromEl, toEl) === false) {\n                    return;\n                }\n            }\n\n            if (fromEl.nodeName !== 'TEXTAREA') {\n                var curToNodeChild = toEl.firstChild;\n                var curFromNodeChild = fromEl.firstChild;\n                var curToNodeKey;\n\n                var fromNextSibling;\n                var toNextSibling;\n                var matchingFromEl;\n\n                outer: while (curToNodeChild) {\n                    toNextSibling = curToNodeChild.nextSibling;\n                    curToNodeKey = getNodeKey(curToNodeChild);\n\n                    while (curFromNodeChild) {\n                        fromNextSibling = curFromNodeChild.nextSibling;\n\n                        if (curToNodeChild.isSameNode && curToNodeChild.isSameNode(curFromNodeChild)) {\n                            curToNodeChild = toNextSibling;\n                            curFromNodeChild = fromNextSibling;\n                            continue outer;\n                        }\n\n                        curFromNodeKey = getNodeKey(curFromNodeChild);\n\n                        var curFromNodeType = curFromNodeChild.nodeType;\n\n                        var isCompatible = undefined;\n\n                        if (curFromNodeType === curToNodeChild.nodeType) {\n                            if (curFromNodeType === ELEMENT_NODE) {\n                                // Both nodes being compared are Element nodes\n\n                                if (curToNodeKey) {\n                                    // The target node has a key so we want to match it up with the correct element\n                                    // in the original DOM tree\n                                    if (curToNodeKey !== curFromNodeKey) {\n                                        // The current element in the original DOM tree does not have a matching key so\n                                        // let's check our lookup to see if there is a matching element in the original\n                                        // DOM tree\n                                        if ((matchingFromEl = fromNodesLookup[curToNodeKey])) {\n                                            if (curFromNodeChild.nextSibling === matchingFromEl) {\n                                                // Special case for single element removals. To avoid removing the original\n                                                // DOM node out of the tree (since that can break CSS transitions, etc.),\n                                                // we will instead discard the current node and wait until the next\n                                                // iteration to properly match up the keyed target element with its matching\n                                                // element in the original tree\n                                                isCompatible = false;\n                                            } else {\n                                                // We found a matching keyed element somewhere in the original DOM tree.\n                                                // Let's moving the original DOM node into the current position and morph\n                                                // it.\n\n                                                // NOTE: We use insertBefore instead of replaceChild because we want to go through\n                                                // the `removeNode()` function for the node that is being discarded so that\n                                                // all lifecycle hooks are correctly invoked\n                                                fromEl.insertBefore(matchingFromEl, curFromNodeChild);\n\n                                                fromNextSibling = curFromNodeChild.nextSibling;\n\n                                                if (curFromNodeKey) {\n                                                    // Since the node is keyed it might be matched up later so we defer\n                                                    // the actual removal to later\n                                                    addKeyedRemoval(curFromNodeKey);\n                                                } else {\n                                                    // NOTE: we skip nested keyed nodes from being removed since there is\n                                                    //       still a chance they will be matched up later\n                                                    removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n                                                }\n\n                                                curFromNodeChild = matchingFromEl;\n                                            }\n                                        } else {\n                                            // The nodes are not compatible since the \"to\" node has a key and there\n                                            // is no matching keyed node in the source tree\n                                            isCompatible = false;\n                                        }\n                                    }\n                                } else if (curFromNodeKey) {\n                                    // The original has a key\n                                    isCompatible = false;\n                                }\n\n                                isCompatible = isCompatible !== false && compareNodeNames(curFromNodeChild, curToNodeChild);\n                                if (isCompatible) {\n                                    // We found compatible DOM elements so transform\n                                    // the current \"from\" node to match the current\n                                    // target DOM node.\n                                    morphEl(curFromNodeChild, curToNodeChild);\n                                }\n\n                            } else if (curFromNodeType === TEXT_NODE || curFromNodeType == COMMENT_NODE) {\n                                // Both nodes being compared are Text or Comment nodes\n                                isCompatible = true;\n                                // Simply update nodeValue on the original node to\n                                // change the text value\n                                curFromNodeChild.nodeValue = curToNodeChild.nodeValue;\n                            }\n                        }\n\n                        if (isCompatible) {\n                            // Advance both the \"to\" child and the \"from\" child since we found a match\n                            curToNodeChild = toNextSibling;\n                            curFromNodeChild = fromNextSibling;\n                            continue outer;\n                        }\n\n                        // No compatible match so remove the old node from the DOM and continue trying to find a\n                        // match in the original DOM. However, we only do this if the from node is not keyed\n                        // since it is possible that a keyed node might match up with a node somewhere else in the\n                        // target tree and we don't want to discard it just yet since it still might find a\n                        // home in the final DOM tree. After everything is done we will remove any keyed nodes\n                        // that didn't find a home\n                        if (curFromNodeKey) {\n                            // Since the node is keyed it might be matched up later so we defer\n                            // the actual removal to later\n                            addKeyedRemoval(curFromNodeKey);\n                        } else {\n                            // NOTE: we skip nested keyed nodes from being removed since there is\n                            //       still a chance they will be matched up later\n                            removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n                        }\n\n                        curFromNodeChild = fromNextSibling;\n                    }\n\n                    // If we got this far then we did not find a candidate match for\n                    // our \"to node\" and we exhausted all of the children \"from\"\n                    // nodes. Therefore, we will just append the current \"to\" node\n                    // to the end\n                    if (curToNodeKey && (matchingFromEl = fromNodesLookup[curToNodeKey]) && compareNodeNames(matchingFromEl, curToNodeChild)) {\n                        fromEl.appendChild(matchingFromEl);\n                        morphEl(matchingFromEl, curToNodeChild);\n                    } else {\n                        var onBeforeNodeAddedResult = onBeforeNodeAdded(curToNodeChild);\n                        if (onBeforeNodeAddedResult !== false) {\n                            if (onBeforeNodeAddedResult) {\n                                curToNodeChild = onBeforeNodeAddedResult;\n                            }\n\n                            if (curToNodeChild.actualize) {\n                                curToNodeChild = curToNodeChild.actualize(fromEl.ownerDocument || doc);\n                            }\n                            fromEl.appendChild(curToNodeChild);\n                            handleNodeAdded(curToNodeChild);\n                        }\n                    }\n\n                    curToNodeChild = toNextSibling;\n                    curFromNodeChild = fromNextSibling;\n                }\n\n                // We have processed all of the \"to nodes\". If curFromNodeChild is\n                // non-null then we still have some from nodes left over that need\n                // to be removed\n                while (curFromNodeChild) {\n                    fromNextSibling = curFromNodeChild.nextSibling;\n                    if ((curFromNodeKey = getNodeKey(curFromNodeChild))) {\n                        // Since the node is keyed it might be matched up later so we defer\n                        // the actual removal to later\n                        addKeyedRemoval(curFromNodeKey);\n                    } else {\n                        // NOTE: we skip nested keyed nodes from being removed since there is\n                        //       still a chance they will be matched up later\n                        removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n                    }\n                    curFromNodeChild = fromNextSibling;\n                }\n            }\n\n            var specialElHandler = specialElHandlers[fromEl.nodeName];\n            if (specialElHandler) {\n                specialElHandler(fromEl, toEl);\n            }\n        } // END: morphEl(...)\n\n        var morphedNode = fromNode;\n        var morphedNodeType = morphedNode.nodeType;\n        var toNodeType = toNode.nodeType;\n\n        if (!childrenOnly) {\n            // Handle the case where we are given two DOM nodes that are not\n            // compatible (e.g. <div> --> <span> or <div> --> TEXT)\n            if (morphedNodeType === ELEMENT_NODE) {\n                if (toNodeType === ELEMENT_NODE) {\n                    if (!compareNodeNames(fromNode, toNode)) {\n                        onNodeDiscarded(fromNode);\n                        morphedNode = moveChildren(fromNode, createElementNS(toNode.nodeName, toNode.namespaceURI));\n                    }\n                } else {\n                    // Going from an element node to a text node\n                    morphedNode = toNode;\n                }\n            } else if (morphedNodeType === TEXT_NODE || morphedNodeType === COMMENT_NODE) { // Text or comment node\n                if (toNodeType === morphedNodeType) {\n                    morphedNode.nodeValue = toNode.nodeValue;\n                    return morphedNode;\n                } else {\n                    // Text node to something else\n                    morphedNode = toNode;\n                }\n            }\n        }\n\n        if (morphedNode === toNode) {\n            // The \"to node\" was not compatible with the \"from node\" so we had to\n            // toss out the \"from node\" and use the \"to node\"\n            onNodeDiscarded(fromNode);\n        } else {\n            morphEl(morphedNode, toNode, childrenOnly);\n\n            // We now need to loop over any keyed nodes that might need to be\n            // removed. We only do the removal if we know that the keyed node\n            // never found a match. When a keyed node is matched up we remove\n            // it out of fromNodesLookup and we use fromNodesLookup to determine\n            // if a keyed node has been matched up or not\n            if (keyedRemovalList) {\n                for (var i=0, len=keyedRemovalList.length; i<len; i++) {\n                    var elToRemove = fromNodesLookup[keyedRemovalList[i]];\n                    if (elToRemove) {\n                        removeNode(elToRemove, elToRemove.parentNode, false);\n                    }\n                }\n            }\n        }\n\n        if (!childrenOnly && morphedNode !== fromNode && fromNode.parentNode) {\n            if (morphedNode.actualize) {\n                morphedNode = morphedNode.actualize(fromNode.ownerDocument || doc);\n            }\n            // If we had to swap out the from node with a new node because the old\n            // node was not compatible with the target node then we need to\n            // replace the old DOM node in the original DOM tree. This is only\n            // possible if the original DOM node was part of a DOM tree which\n            // we know is the case if it has a parent node.\n            fromNode.parentNode.replaceChild(morphedNode, fromNode);\n        }\n\n        return morphedNode;\n    };\n}\n\nvar morphdom = morphdomFactory(morphAttrs);\n\nmodule.exports = morphdom;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/morphdom/dist/morphdom.js\n// module id = 16\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/morphdom/dist/morphdom.js?");

/***/ })
/******/ ]);